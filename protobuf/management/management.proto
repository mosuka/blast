// Copyright (c) 2019 Minoru Osuka
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 		http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package management;

option go_package = "github.com/mosuka/blast/protobuf/management";

service Management {
    rpc NodeHealthCheck (NodeHealthCheckRequest) returns (NodeHealthCheckResponse) {}
    rpc NodeInfo (google.protobuf.Empty) returns (NodeInfoResponse) {}

    rpc ClusterJoin (ClusterJoinRequest) returns (google.protobuf.Empty) {}
    rpc ClusterLeave (ClusterLeaveRequest) returns (google.protobuf.Empty) {}
    rpc ClusterInfo (google.protobuf.Empty) returns (ClusterInfoResponse) {}
    rpc ClusterWatch (google.protobuf.Empty) returns (stream ClusterInfoResponse) {}

    rpc Get (GetRequest) returns (GetResponse) {}
    rpc Set (SetRequest) returns (google.protobuf.Empty) {}
    rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {}
    rpc Watch (WatchRequest) returns (stream WatchResponse) {}
    rpc Snapshot (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message NodeHealthCheckRequest {
    enum Probe {
        HEALTHINESS = 0;
        LIVENESS = 1;
        READINESS = 2;
    }
    Probe probe = 1;
}

message NodeHealthCheckResponse {
    enum State {
        HEALTHY = 0;
        UNHEALTHY = 1;
        ALIVE = 2;
        DEAD = 3;
        READY = 4;
        NOT_READY = 5;
    }
    State state = 1;
}

// use for raft
message Metadata {
    string grpc_address = 1;
    string http_address = 2;
}

message Node {
    string bind_address = 1;
    string state = 2;
    Metadata metadata = 3;
}

message Cluster {
    map<string, Node> nodes = 1;
}

message NodeInfoResponse {
    Node node = 1;
}

message ClusterJoinRequest {
    string id = 1;
    Node node = 2;
}

message ClusterLeaveRequest {
    string id = 1;
}

message ClusterInfoResponse {
    Cluster cluster = 1;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    google.protobuf.Any value = 1;
}

message SetRequest {
    string key = 1;
    google.protobuf.Any value = 2;
}

message DeleteRequest {
    string key = 1;
}

message WatchRequest {
    string key = 1;
}

message WatchResponse {
    enum Command {
        UNKNOWN = 0;
        SET = 1;
        DELETE = 2;
    }
    Command command = 1;
    string key = 2;
    google.protobuf.Any value = 3;
}
