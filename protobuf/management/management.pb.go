// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/management/management.proto

package management

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeHealthCheckRequest_Probe int32

const (
	NodeHealthCheckRequest_HEALTHINESS NodeHealthCheckRequest_Probe = 0
	NodeHealthCheckRequest_LIVENESS    NodeHealthCheckRequest_Probe = 1
	NodeHealthCheckRequest_READINESS   NodeHealthCheckRequest_Probe = 2
)

var NodeHealthCheckRequest_Probe_name = map[int32]string{
	0: "HEALTHINESS",
	1: "LIVENESS",
	2: "READINESS",
}

var NodeHealthCheckRequest_Probe_value = map[string]int32{
	"HEALTHINESS": 0,
	"LIVENESS":    1,
	"READINESS":   2,
}

func (x NodeHealthCheckRequest_Probe) String() string {
	return proto.EnumName(NodeHealthCheckRequest_Probe_name, int32(x))
}

func (NodeHealthCheckRequest_Probe) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{0, 0}
}

type NodeHealthCheckResponse_State int32

const (
	NodeHealthCheckResponse_HEALTHY   NodeHealthCheckResponse_State = 0
	NodeHealthCheckResponse_UNHEALTHY NodeHealthCheckResponse_State = 1
	NodeHealthCheckResponse_ALIVE     NodeHealthCheckResponse_State = 2
	NodeHealthCheckResponse_DEAD      NodeHealthCheckResponse_State = 3
	NodeHealthCheckResponse_READY     NodeHealthCheckResponse_State = 4
	NodeHealthCheckResponse_NOT_READY NodeHealthCheckResponse_State = 5
)

var NodeHealthCheckResponse_State_name = map[int32]string{
	0: "HEALTHY",
	1: "UNHEALTHY",
	2: "ALIVE",
	3: "DEAD",
	4: "READY",
	5: "NOT_READY",
}

var NodeHealthCheckResponse_State_value = map[string]int32{
	"HEALTHY":   0,
	"UNHEALTHY": 1,
	"ALIVE":     2,
	"DEAD":      3,
	"READY":     4,
	"NOT_READY": 5,
}

func (x NodeHealthCheckResponse_State) String() string {
	return proto.EnumName(NodeHealthCheckResponse_State_name, int32(x))
}

func (NodeHealthCheckResponse_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{1, 0}
}

type Node_State int32

const (
	Node_UNKNOWN   Node_State = 0
	Node_FOLLOWER  Node_State = 1
	Node_CANDIDATE Node_State = 2
	Node_LEADER    Node_State = 3
	Node_SHUTDOWN  Node_State = 4
)

var Node_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "FOLLOWER",
	2: "CANDIDATE",
	3: "LEADER",
	4: "SHUTDOWN",
}

var Node_State_value = map[string]int32{
	"UNKNOWN":   0,
	"FOLLOWER":  1,
	"CANDIDATE": 2,
	"LEADER":    3,
	"SHUTDOWN":  4,
}

func (x Node_State) String() string {
	return proto.EnumName(Node_State_name, int32(x))
}

func (Node_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{3, 0}
}

type ClusterWatchResponse_Event int32

const (
	ClusterWatchResponse_UNKNOWN ClusterWatchResponse_Event = 0
	ClusterWatchResponse_JOIN    ClusterWatchResponse_Event = 1
	ClusterWatchResponse_LEAVE   ClusterWatchResponse_Event = 2
	ClusterWatchResponse_UPDATE  ClusterWatchResponse_Event = 3
)

var ClusterWatchResponse_Event_name = map[int32]string{
	0: "UNKNOWN",
	1: "JOIN",
	2: "LEAVE",
	3: "UPDATE",
}

var ClusterWatchResponse_Event_value = map[string]int32{
	"UNKNOWN": 0,
	"JOIN":    1,
	"LEAVE":   2,
	"UPDATE":  3,
}

func (x ClusterWatchResponse_Event) String() string {
	return proto.EnumName(ClusterWatchResponse_Event_name, int32(x))
}

func (ClusterWatchResponse_Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{9, 0}
}

type WatchResponse_Command int32

const (
	WatchResponse_UNKNOWN WatchResponse_Command = 0
	WatchResponse_SET     WatchResponse_Command = 1
	WatchResponse_DELETE  WatchResponse_Command = 2
)

var WatchResponse_Command_name = map[int32]string{
	0: "UNKNOWN",
	1: "SET",
	2: "DELETE",
}

var WatchResponse_Command_value = map[string]int32{
	"UNKNOWN": 0,
	"SET":     1,
	"DELETE":  2,
}

func (x WatchResponse_Command) String() string {
	return proto.EnumName(WatchResponse_Command_name, int32(x))
}

func (WatchResponse_Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{15, 0}
}

type NodeHealthCheckRequest struct {
	Probe                NodeHealthCheckRequest_Probe `protobuf:"varint,1,opt,name=probe,proto3,enum=management.NodeHealthCheckRequest_Probe" json:"probe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *NodeHealthCheckRequest) Reset()         { *m = NodeHealthCheckRequest{} }
func (m *NodeHealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*NodeHealthCheckRequest) ProtoMessage()    {}
func (*NodeHealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{0}
}

func (m *NodeHealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeHealthCheckRequest.Unmarshal(m, b)
}
func (m *NodeHealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeHealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *NodeHealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeHealthCheckRequest.Merge(m, src)
}
func (m *NodeHealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_NodeHealthCheckRequest.Size(m)
}
func (m *NodeHealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeHealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeHealthCheckRequest proto.InternalMessageInfo

func (m *NodeHealthCheckRequest) GetProbe() NodeHealthCheckRequest_Probe {
	if m != nil {
		return m.Probe
	}
	return NodeHealthCheckRequest_HEALTHINESS
}

type NodeHealthCheckResponse struct {
	State                NodeHealthCheckResponse_State `protobuf:"varint,1,opt,name=state,proto3,enum=management.NodeHealthCheckResponse_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *NodeHealthCheckResponse) Reset()         { *m = NodeHealthCheckResponse{} }
func (m *NodeHealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*NodeHealthCheckResponse) ProtoMessage()    {}
func (*NodeHealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{1}
}

func (m *NodeHealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeHealthCheckResponse.Unmarshal(m, b)
}
func (m *NodeHealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeHealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *NodeHealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeHealthCheckResponse.Merge(m, src)
}
func (m *NodeHealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_NodeHealthCheckResponse.Size(m)
}
func (m *NodeHealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeHealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeHealthCheckResponse proto.InternalMessageInfo

func (m *NodeHealthCheckResponse) GetState() NodeHealthCheckResponse_State {
	if m != nil {
		return m.State
	}
	return NodeHealthCheckResponse_HEALTHY
}

type Metadata struct {
	GrpcAddress          string   `protobuf:"bytes,1,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	HttpAddress          string   `protobuf:"bytes,2,opt,name=http_address,json=httpAddress,proto3" json:"http_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{2}
}

func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetGrpcAddress() string {
	if m != nil {
		return m.GrpcAddress
	}
	return ""
}

func (m *Metadata) GetHttpAddress() string {
	if m != nil {
		return m.HttpAddress
	}
	return ""
}

type Node struct {
	BindAddress          string     `protobuf:"bytes,1,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	State                Node_State `protobuf:"varint,2,opt,name=state,proto3,enum=management.Node_State" json:"state,omitempty"`
	Metadata             *Metadata  `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *Node) GetState() Node_State {
	if m != nil {
		return m.State
	}
	return Node_UNKNOWN
}

func (m *Node) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Cluster struct {
	Nodes                map[string]*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{4}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetNodes() map[string]*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeInfoResponse struct {
	Node                 *Node    `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfoResponse) Reset()         { *m = NodeInfoResponse{} }
func (m *NodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NodeInfoResponse) ProtoMessage()    {}
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{5}
}

func (m *NodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfoResponse.Unmarshal(m, b)
}
func (m *NodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfoResponse.Marshal(b, m, deterministic)
}
func (m *NodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoResponse.Merge(m, src)
}
func (m *NodeInfoResponse) XXX_Size() int {
	return xxx_messageInfo_NodeInfoResponse.Size(m)
}
func (m *NodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoResponse proto.InternalMessageInfo

func (m *NodeInfoResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ClusterJoinRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *Node    `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterJoinRequest) Reset()         { *m = ClusterJoinRequest{} }
func (m *ClusterJoinRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterJoinRequest) ProtoMessage()    {}
func (*ClusterJoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{6}
}

func (m *ClusterJoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterJoinRequest.Unmarshal(m, b)
}
func (m *ClusterJoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterJoinRequest.Marshal(b, m, deterministic)
}
func (m *ClusterJoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterJoinRequest.Merge(m, src)
}
func (m *ClusterJoinRequest) XXX_Size() int {
	return xxx_messageInfo_ClusterJoinRequest.Size(m)
}
func (m *ClusterJoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterJoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterJoinRequest proto.InternalMessageInfo

func (m *ClusterJoinRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClusterJoinRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ClusterLeaveRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterLeaveRequest) Reset()         { *m = ClusterLeaveRequest{} }
func (m *ClusterLeaveRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterLeaveRequest) ProtoMessage()    {}
func (*ClusterLeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{7}
}

func (m *ClusterLeaveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLeaveRequest.Unmarshal(m, b)
}
func (m *ClusterLeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLeaveRequest.Marshal(b, m, deterministic)
}
func (m *ClusterLeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLeaveRequest.Merge(m, src)
}
func (m *ClusterLeaveRequest) XXX_Size() int {
	return xxx_messageInfo_ClusterLeaveRequest.Size(m)
}
func (m *ClusterLeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLeaveRequest proto.InternalMessageInfo

func (m *ClusterLeaveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ClusterInfoResponse struct {
	Cluster              *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterInfoResponse) Reset()         { *m = ClusterInfoResponse{} }
func (m *ClusterInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterInfoResponse) ProtoMessage()    {}
func (*ClusterInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{8}
}

func (m *ClusterInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterInfoResponse.Unmarshal(m, b)
}
func (m *ClusterInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterInfoResponse.Marshal(b, m, deterministic)
}
func (m *ClusterInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfoResponse.Merge(m, src)
}
func (m *ClusterInfoResponse) XXX_Size() int {
	return xxx_messageInfo_ClusterInfoResponse.Size(m)
}
func (m *ClusterInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfoResponse proto.InternalMessageInfo

func (m *ClusterInfoResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type ClusterWatchResponse struct {
	Event                ClusterWatchResponse_Event `protobuf:"varint,1,opt,name=event,proto3,enum=management.ClusterWatchResponse_Event" json:"event,omitempty"`
	Id                   string                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *Node                      `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Cluster              *Cluster                   `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ClusterWatchResponse) Reset()         { *m = ClusterWatchResponse{} }
func (m *ClusterWatchResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterWatchResponse) ProtoMessage()    {}
func (*ClusterWatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{9}
}

func (m *ClusterWatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterWatchResponse.Unmarshal(m, b)
}
func (m *ClusterWatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterWatchResponse.Marshal(b, m, deterministic)
}
func (m *ClusterWatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterWatchResponse.Merge(m, src)
}
func (m *ClusterWatchResponse) XXX_Size() int {
	return xxx_messageInfo_ClusterWatchResponse.Size(m)
}
func (m *ClusterWatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterWatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterWatchResponse proto.InternalMessageInfo

func (m *ClusterWatchResponse) GetEvent() ClusterWatchResponse_Event {
	if m != nil {
		return m.Event
	}
	return ClusterWatchResponse_UNKNOWN
}

func (m *ClusterWatchResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClusterWatchResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ClusterWatchResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type GetRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{10}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResponse struct {
	Value                *any.Any `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{11}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetValue() *any.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                *any.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}
func (*SetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{12}
}

func (m *SetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRequest.Unmarshal(m, b)
}
func (m *SetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRequest.Marshal(b, m, deterministic)
}
func (m *SetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRequest.Merge(m, src)
}
func (m *SetRequest) XXX_Size() int {
	return xxx_messageInfo_SetRequest.Size(m)
}
func (m *SetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRequest proto.InternalMessageInfo

func (m *SetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetRequest) GetValue() *any.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

type DeleteRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{13}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type WatchRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRequest) Reset()         { *m = WatchRequest{} }
func (m *WatchRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()    {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{14}
}

func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRequest.Unmarshal(m, b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
}
func (m *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(m, src)
}
func (m *WatchRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRequest.Size(m)
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

func (m *WatchRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type WatchResponse struct {
	Command              WatchResponse_Command `protobuf:"varint,1,opt,name=command,proto3,enum=management.WatchResponse_Command" json:"command,omitempty"`
	Key                  string                `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                *any.Any              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WatchResponse) Reset()         { *m = WatchResponse{} }
func (m *WatchResponse) String() string { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()    {}
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{15}
}

func (m *WatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchResponse.Unmarshal(m, b)
}
func (m *WatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchResponse.Marshal(b, m, deterministic)
}
func (m *WatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse.Merge(m, src)
}
func (m *WatchResponse) XXX_Size() int {
	return xxx_messageInfo_WatchResponse.Size(m)
}
func (m *WatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse proto.InternalMessageInfo

func (m *WatchResponse) GetCommand() WatchResponse_Command {
	if m != nil {
		return m.Command
	}
	return WatchResponse_UNKNOWN
}

func (m *WatchResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WatchResponse) GetValue() *any.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("management.NodeHealthCheckRequest_Probe", NodeHealthCheckRequest_Probe_name, NodeHealthCheckRequest_Probe_value)
	proto.RegisterEnum("management.NodeHealthCheckResponse_State", NodeHealthCheckResponse_State_name, NodeHealthCheckResponse_State_value)
	proto.RegisterEnum("management.Node_State", Node_State_name, Node_State_value)
	proto.RegisterEnum("management.ClusterWatchResponse_Event", ClusterWatchResponse_Event_name, ClusterWatchResponse_Event_value)
	proto.RegisterEnum("management.WatchResponse_Command", WatchResponse_Command_name, WatchResponse_Command_value)
	proto.RegisterType((*NodeHealthCheckRequest)(nil), "management.NodeHealthCheckRequest")
	proto.RegisterType((*NodeHealthCheckResponse)(nil), "management.NodeHealthCheckResponse")
	proto.RegisterType((*Metadata)(nil), "management.Metadata")
	proto.RegisterType((*Node)(nil), "management.Node")
	proto.RegisterType((*Cluster)(nil), "management.Cluster")
	proto.RegisterMapType((map[string]*Node)(nil), "management.Cluster.NodesEntry")
	proto.RegisterType((*NodeInfoResponse)(nil), "management.NodeInfoResponse")
	proto.RegisterType((*ClusterJoinRequest)(nil), "management.ClusterJoinRequest")
	proto.RegisterType((*ClusterLeaveRequest)(nil), "management.ClusterLeaveRequest")
	proto.RegisterType((*ClusterInfoResponse)(nil), "management.ClusterInfoResponse")
	proto.RegisterType((*ClusterWatchResponse)(nil), "management.ClusterWatchResponse")
	proto.RegisterType((*GetRequest)(nil), "management.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "management.GetResponse")
	proto.RegisterType((*SetRequest)(nil), "management.SetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "management.DeleteRequest")
	proto.RegisterType((*WatchRequest)(nil), "management.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "management.WatchResponse")
}

func init() {
	proto.RegisterFile("protobuf/management/management.proto", fileDescriptor_5e030ad796566078)
}

var fileDescriptor_5e030ad796566078 = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x7f, 0x6f, 0xda, 0x46,
	0x18, 0xc6, 0x36, 0x0e, 0xe4, 0x25, 0x69, 0xad, 0x6b, 0x95, 0x26, 0x6c, 0xea, 0x92, 0x5b, 0x57,
	0x65, 0xeb, 0x0a, 0x15, 0x5b, 0xb5, 0x6c, 0xeb, 0x7e, 0xb8, 0xb1, 0x17, 0xa0, 0xd4, 0x44, 0x86,
	0x34, 0xea, 0x34, 0xa9, 0x32, 0xf8, 0x0a, 0x28, 0x60, 0x33, 0x7c, 0x44, 0xca, 0x67, 0xd8, 0xa4,
	0x7d, 0x93, 0xfd, 0xbb, 0x6f, 0xb2, 0xcf, 0xb1, 0x8f, 0x30, 0x9d, 0xef, 0x6c, 0x6c, 0x30, 0xa4,
	0xff, 0x71, 0xef, 0x3d, 0xcf, 0x73, 0xcf, 0xfb, 0xde, 0xbd, 0xaf, 0x81, 0x47, 0xd3, 0x99, 0x4f,
	0xfd, 0xde, 0xfc, 0x7d, 0x75, 0xe2, 0x78, 0xce, 0x80, 0x4c, 0x88, 0x47, 0x13, 0x3f, 0x2b, 0xe1,
	0x36, 0x82, 0x45, 0xa4, 0x7c, 0x30, 0xf0, 0xfd, 0xc1, 0x98, 0x54, 0x63, 0xa2, 0xe3, 0xdd, 0x70,
	0x58, 0xf9, 0xa3, 0xe5, 0x2d, 0x32, 0x99, 0x52, 0xb1, 0x89, 0xff, 0x92, 0x60, 0xcf, 0xf2, 0x5d,
	0x52, 0x27, 0xce, 0x98, 0x0e, 0x4f, 0x87, 0xa4, 0x7f, 0x65, 0x93, 0xdf, 0xe7, 0x24, 0xa0, 0xe8,
	0x47, 0x50, 0xa7, 0x33, 0xbf, 0x47, 0xf6, 0xa5, 0x43, 0xe9, 0xf8, 0x4e, 0xed, 0xb8, 0x92, 0x30,
	0x90, 0x4d, 0xa9, 0x9c, 0x33, 0xbc, 0xcd, 0x69, 0xf8, 0x39, 0xa8, 0xe1, 0x1a, 0xdd, 0x85, 0x52,
	0xdd, 0xd4, 0x5b, 0xdd, 0x7a, 0xc3, 0x32, 0x3b, 0x1d, 0x2d, 0x87, 0x76, 0xa0, 0xd8, 0x6a, 0xbc,
	0x31, 0xc3, 0x95, 0x84, 0x76, 0x61, 0xdb, 0x36, 0x75, 0x83, 0x6f, 0xca, 0xf8, 0x6f, 0x09, 0x1e,
	0xac, 0xc8, 0x07, 0x53, 0xdf, 0x0b, 0x08, 0xfa, 0x09, 0xd4, 0x80, 0x3a, 0x34, 0xb2, 0xf4, 0xf9,
	0x46, 0x4b, 0x9c, 0x53, 0xe9, 0x30, 0x82, 0xcd, 0x79, 0xd8, 0x06, 0x35, 0x5c, 0xa3, 0x12, 0x14,
	0xb8, 0xa7, 0xb7, 0x5a, 0x8e, 0x39, 0xb8, 0xb0, 0xa2, 0xa5, 0x84, 0xb6, 0x41, 0xd5, 0x99, 0x3f,
	0x4d, 0x46, 0x45, 0xc8, 0x1b, 0xa6, 0x6e, 0x68, 0x0a, 0x0b, 0x32, 0x97, 0x6f, 0xb5, 0x3c, 0x83,
	0x5b, 0xed, 0xee, 0x3b, 0xbe, 0x54, 0xf1, 0x39, 0x14, 0x5f, 0x13, 0xea, 0xb8, 0x0e, 0x75, 0xd0,
	0x11, 0xec, 0x0c, 0x66, 0xd3, 0xfe, 0x3b, 0xc7, 0x75, 0x67, 0x24, 0x08, 0x42, 0x9f, 0xdb, 0x76,
	0x89, 0xc5, 0x74, 0x1e, 0x62, 0x90, 0x21, 0xa5, 0xd3, 0x18, 0x22, 0x73, 0x08, 0x8b, 0x09, 0x08,
	0xfe, 0x57, 0x82, 0x3c, 0x4b, 0x87, 0x61, 0x7b, 0x23, 0xcf, 0x5d, 0x96, 0x63, 0xb1, 0x48, 0xee,
	0xcb, 0xa8, 0x24, 0x72, 0x58, 0x92, 0xbd, 0xe5, 0x92, 0xa4, 0xf2, 0x47, 0xcf, 0xa0, 0x38, 0x11,
	0x5e, 0xf7, 0x95, 0x43, 0xe9, 0xb8, 0x54, 0xbb, 0x9f, 0x24, 0x44, 0x79, 0xd8, 0x31, 0x0a, 0xbf,
	0x4a, 0x54, 0xec, 0xc2, 0x7a, 0x65, 0xb5, 0x2f, 0x2d, 0x7e, 0x83, 0xbf, 0xb4, 0x5b, 0xad, 0xf6,
	0xa5, 0x69, 0xf3, 0x1b, 0x3c, 0xd5, 0x2d, 0xa3, 0x61, 0xe8, 0x5d, 0x56, 0x34, 0x80, 0xad, 0x96,
	0xa9, 0x1b, 0xa6, 0xad, 0x29, 0x0c, 0xd8, 0xa9, 0x5f, 0x74, 0x0d, 0x46, 0xcb, 0xe3, 0x3f, 0x24,
	0x28, 0x9c, 0x8e, 0xe7, 0x01, 0x25, 0x33, 0xf4, 0x35, 0xa8, 0x9e, 0xef, 0x12, 0x96, 0x94, 0x72,
	0x5c, 0xaa, 0x3d, 0x4c, 0xfa, 0x10, 0x98, 0x30, 0x81, 0xc0, 0xf4, 0xe8, 0xec, 0xc6, 0xe6, 0xe0,
	0x72, 0x13, 0x60, 0x11, 0x44, 0x1a, 0x28, 0x57, 0xe4, 0x46, 0x94, 0x85, 0xfd, 0x44, 0x8f, 0x41,
	0xbd, 0x76, 0xc6, 0x73, 0x5e, 0x8e, 0x52, 0x4d, 0x5b, 0x2e, 0x87, 0xcd, 0xb7, 0xbf, 0x93, 0x4f,
	0x24, 0x7c, 0x02, 0x1a, 0x0b, 0x35, 0xbc, 0xf7, 0x7e, 0xfc, 0xc2, 0x1e, 0x41, 0x9e, 0x1d, 0x14,
	0x4a, 0x66, 0xd1, 0xc3, 0x5d, 0xdc, 0x04, 0x24, 0x2c, 0x36, 0xfd, 0x91, 0x17, 0x35, 0xcc, 0x1d,
	0x90, 0x47, 0xae, 0x30, 0x23, 0x8f, 0xdc, 0x58, 0x4b, 0xde, 0xa8, 0xf5, 0x19, 0xdc, 0x13, 0x5a,
	0x2d, 0xe2, 0x5c, 0x93, 0x35, 0x62, 0xd8, 0x88, 0x61, 0x29, 0xbf, 0x4f, 0xa1, 0xd0, 0xe7, 0x61,
	0x61, 0xf9, 0x5e, 0x46, 0x1d, 0xed, 0x08, 0x83, 0xff, 0x93, 0xe0, 0xbe, 0x08, 0x5e, 0x3a, 0xb4,
	0x3f, 0x8c, 0x75, 0x5e, 0x80, 0x4a, 0xae, 0x89, 0x47, 0x45, 0x67, 0x3d, 0xce, 0x50, 0x49, 0x11,
	0x2a, 0x26, 0x43, 0xdb, 0x9c, 0x24, 0xcc, 0xca, 0x2b, 0x99, 0x2b, 0x9b, 0x32, 0x4f, 0x7a, 0xcf,
	0x7f, 0x80, 0xf7, 0xe7, 0xa0, 0x86, 0x87, 0xa6, 0x5f, 0x62, 0x11, 0xf2, 0xcd, 0x76, 0xc3, 0xe2,
	0x6d, 0xdb, 0x32, 0xf5, 0x37, 0xe2, 0x05, 0x5e, 0x9c, 0x87, 0xaf, 0x51, 0xc1, 0x0f, 0x01, 0xce,
	0x08, 0x8d, 0xca, 0xba, 0xf2, 0x62, 0xf0, 0xb7, 0x50, 0x0a, 0xf7, 0x45, 0x21, 0xbe, 0x88, 0x1e,
	0x90, 0x24, 0xda, 0x83, 0x4f, 0xcf, 0x4a, 0x34, 0x3d, 0x2b, 0xba, 0x77, 0x23, 0x1e, 0x11, 0x6e,
	0x02, 0x74, 0x36, 0x48, 0x2f, 0xb4, 0xe4, 0xdb, 0xb5, 0x8e, 0x60, 0xd7, 0x20, 0x63, 0x42, 0xc9,
	0x7a, 0xa7, 0x87, 0xb0, 0x23, 0xee, 0x60, 0x1d, 0xe2, 0x1f, 0x09, 0x76, 0xd3, 0xf7, 0xfa, 0x3d,
	0x14, 0xfa, 0xfe, 0x64, 0xe2, 0x78, 0xae, 0xb8, 0xd9, 0xa3, 0x64, 0x8d, 0xd3, 0x57, 0x7a, 0xca,
	0x81, 0x76, 0xc4, 0x88, 0x0e, 0x90, 0x33, 0x32, 0x52, 0x6e, 0xcf, 0xe8, 0x09, 0x14, 0x84, 0x62,
	0xfa, 0xc6, 0x0a, 0xa0, 0x74, 0xcc, 0xae, 0x26, 0xb1, 0x5b, 0x32, 0xcc, 0x96, 0xc9, 0x66, 0x46,
	0xed, 0xcf, 0x2d, 0x80, 0xd7, 0xb1, 0x31, 0xf4, 0x1b, 0xdc, 0x5d, 0x9a, 0xe7, 0x08, 0xdf, 0xfe,
	0xfd, 0x29, 0x7f, 0xfa, 0x01, 0x1f, 0x04, 0x9c, 0x43, 0x2f, 0xa1, 0x18, 0x35, 0x3e, 0xda, 0x5b,
	0x49, 0xc1, 0x64, 0x9f, 0xc7, 0xf2, 0xc7, 0xcb, 0x52, 0xc9, 0xb6, 0xc3, 0x39, 0x74, 0x06, 0xa5,
	0xc4, 0x08, 0x40, 0x59, 0xe3, 0x2b, 0x31, 0x1b, 0xca, 0x6b, 0x8e, 0xc1, 0x39, 0xd4, 0x80, 0x9d,
	0x64, 0xff, 0xa3, 0x4f, 0x32, 0x94, 0x92, 0x93, 0x61, 0x83, 0x54, 0x3d, 0xf6, 0xb4, 0x31, 0xb5,
	0xac, 0x13, 0x96, 0xb2, 0x6b, 0xc5, 0xa6, 0xc2, 0x27, 0xb2, 0x56, 0xea, 0xf0, 0xb6, 0x39, 0x81,
	0x73, 0xcf, 0x24, 0x74, 0x02, 0xca, 0x19, 0xa1, 0x28, 0xf5, 0x6d, 0x5a, 0xf4, 0x64, 0xf9, 0xc1,
	0x4a, 0x3c, 0xf6, 0xf1, 0x0d, 0x28, 0x9d, 0x65, 0xe6, 0xa2, 0xe5, 0x36, 0x94, 0xe2, 0x07, 0xd8,
	0xe2, 0xed, 0x84, 0x0e, 0x92, 0xdc, 0x54, 0x8b, 0x6d, 0xa0, 0xff, 0x0c, 0x2a, 0x4f, 0x7c, 0x3f,
	0xa3, 0x5d, 0x38, 0xf9, 0x60, 0x6d, 0x23, 0x85, 0x39, 0xbf, 0x80, 0x62, 0xc7, 0x73, 0xa6, 0xc1,
	0xd0, 0xa7, 0x6b, 0xab, 0xb7, 0xf6, 0xfc, 0x97, 0x4f, 0x7f, 0x7d, 0x32, 0x18, 0xd1, 0xe1, 0xbc,
	0x57, 0xe9, 0xfb, 0x93, 0xea, 0xc4, 0x0f, 0xe6, 0x57, 0x4e, 0xb5, 0x37, 0x76, 0x02, 0x5a, 0xcd,
	0xf8, 0x6b, 0xd8, 0xdb, 0x0a, 0x83, 0x5f, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xa1, 0xdf,
	0xcd, 0x38, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagementClient interface {
	NodeHealthCheck(ctx context.Context, in *NodeHealthCheckRequest, opts ...grpc.CallOption) (*NodeHealthCheckResponse, error)
	NodeInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	ClusterJoin(ctx context.Context, in *ClusterJoinRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClusterLeave(ctx context.Context, in *ClusterLeaveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ClusterInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ClusterInfoResponse, error)
	ClusterWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Management_ClusterWatchClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Management_WatchClient, error)
	Snapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) NodeHealthCheck(ctx context.Context, in *NodeHealthCheckRequest, opts ...grpc.CallOption) (*NodeHealthCheckResponse, error) {
	out := new(NodeHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/management.Management/NodeHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) NodeInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/management.Management/NodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ClusterJoin(ctx context.Context, in *ClusterJoinRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/ClusterJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ClusterLeave(ctx context.Context, in *ClusterLeaveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/ClusterLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ClusterInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ClusterInfoResponse, error) {
	out := new(ClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/management.Management/ClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ClusterWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Management_ClusterWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Management_serviceDesc.Streams[0], "/management.Management/ClusterWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementClusterWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_ClusterWatchClient interface {
	Recv() (*ClusterWatchResponse, error)
	grpc.ClientStream
}

type managementClusterWatchClient struct {
	grpc.ClientStream
}

func (x *managementClusterWatchClient) Recv() (*ClusterWatchResponse, error) {
	m := new(ClusterWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/management.Management/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Management_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Management_serviceDesc.Streams[1], "/management.Management/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type managementWatchClient struct {
	grpc.ClientStream
}

func (x *managementWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) Snapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
type ManagementServer interface {
	NodeHealthCheck(context.Context, *NodeHealthCheckRequest) (*NodeHealthCheckResponse, error)
	NodeInfo(context.Context, *empty.Empty) (*NodeInfoResponse, error)
	ClusterJoin(context.Context, *ClusterJoinRequest) (*empty.Empty, error)
	ClusterLeave(context.Context, *ClusterLeaveRequest) (*empty.Empty, error)
	ClusterInfo(context.Context, *empty.Empty) (*ClusterInfoResponse, error)
	ClusterWatch(*empty.Empty, Management_ClusterWatchServer) error
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*empty.Empty, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Watch(*WatchRequest, Management_WatchServer) error
	Snapshot(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_NodeHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).NodeHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/NodeHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).NodeHealthCheck(ctx, req.(*NodeHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).NodeInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ClusterJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ClusterJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/ClusterJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ClusterJoin(ctx, req.(*ClusterJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ClusterLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ClusterLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/ClusterLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ClusterLeave(ctx, req.(*ClusterLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/ClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ClusterInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ClusterWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).ClusterWatch(m, &managementClusterWatchServer{stream})
}

type Management_ClusterWatchServer interface {
	Send(*ClusterWatchResponse) error
	grpc.ServerStream
}

type managementClusterWatchServer struct {
	grpc.ServerStream
}

func (x *managementClusterWatchServer) Send(m *ClusterWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).Watch(m, &managementWatchServer{stream})
}

type Management_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type managementWatchServer struct {
	grpc.ServerStream
}

func (x *managementWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Snapshot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeHealthCheck",
			Handler:    _Management_NodeHealthCheck_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _Management_NodeInfo_Handler,
		},
		{
			MethodName: "ClusterJoin",
			Handler:    _Management_ClusterJoin_Handler,
		},
		{
			MethodName: "ClusterLeave",
			Handler:    _Management_ClusterLeave_Handler,
		},
		{
			MethodName: "ClusterInfo",
			Handler:    _Management_ClusterInfo_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Management_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Management_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Management_Delete_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Management_Snapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClusterWatch",
			Handler:       _Management_ClusterWatch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Management_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/management/management.proto",
}
