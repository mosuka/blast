// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/kvs/kvs.proto

package kvs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	raft "github.com/mosuka/blast/protobuf/raft"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KVSCommand_Type int32

const (
	KVSCommand_UNKNOWN_COMMAND       KVSCommand_Type = 0
	KVSCommand_SET_METADATA          KVSCommand_Type = 1
	KVSCommand_DELETE_METADATA       KVSCommand_Type = 2
	KVSCommand_PUT_KEY_VALUE_PAIR    KVSCommand_Type = 3
	KVSCommand_DELETE_KEY_VALUE_PAIR KVSCommand_Type = 4
)

var KVSCommand_Type_name = map[int32]string{
	0: "UNKNOWN_COMMAND",
	1: "SET_METADATA",
	2: "DELETE_METADATA",
	3: "PUT_KEY_VALUE_PAIR",
	4: "DELETE_KEY_VALUE_PAIR",
}

var KVSCommand_Type_value = map[string]int32{
	"UNKNOWN_COMMAND":       0,
	"SET_METADATA":          1,
	"DELETE_METADATA":       2,
	"PUT_KEY_VALUE_PAIR":    3,
	"DELETE_KEY_VALUE_PAIR": 4,
}

func (x KVSCommand_Type) String() string {
	return proto.EnumName(KVSCommand_Type_name, int32(x))
}

func (KVSCommand_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e9909cfc2f34163, []int{1, 0}
}

type KeyValuePair struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9909cfc2f34163, []int{0}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValuePair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type KVSCommand struct {
	Type                 KVSCommand_Type `protobuf:"varint,1,opt,name=type,proto3,enum=kvs.KVSCommand_Type" json:"type,omitempty"`
	Data                 *any.Any        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KVSCommand) Reset()         { *m = KVSCommand{} }
func (m *KVSCommand) String() string { return proto.CompactTextString(m) }
func (*KVSCommand) ProtoMessage()    {}
func (*KVSCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9909cfc2f34163, []int{1}
}

func (m *KVSCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KVSCommand.Unmarshal(m, b)
}
func (m *KVSCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KVSCommand.Marshal(b, m, deterministic)
}
func (m *KVSCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVSCommand.Merge(m, src)
}
func (m *KVSCommand) XXX_Size() int {
	return xxx_messageInfo_KVSCommand.Size(m)
}
func (m *KVSCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_KVSCommand.DiscardUnknown(m)
}

var xxx_messageInfo_KVSCommand proto.InternalMessageInfo

func (m *KVSCommand) GetType() KVSCommand_Type {
	if m != nil {
		return m.Type
	}
	return KVSCommand_UNKNOWN_COMMAND
}

func (m *KVSCommand) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("kvs.KVSCommand_Type", KVSCommand_Type_name, KVSCommand_Type_value)
	proto.RegisterType((*KeyValuePair)(nil), "kvs.KeyValuePair")
	proto.RegisterType((*KVSCommand)(nil), "kvs.KVSCommand")
}

func init() { proto.RegisterFile("protobuf/kvs/kvs.proto", fileDescriptor_6e9909cfc2f34163) }

var fileDescriptor_6e9909cfc2f34163 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5f, 0x8f, 0x93, 0x40,
	0x14, 0xc5, 0xe9, 0xd2, 0x5d, 0xcd, 0xb5, 0x2a, 0x5e, 0x6b, 0xd3, 0xc5, 0x17, 0x43, 0x8c, 0xd9,
	0x07, 0x85, 0xa4, 0x66, 0x7d, 0xf2, 0x05, 0x5b, 0xd2, 0x28, 0x2d, 0xdb, 0xb4, 0xb4, 0x46, 0x5f,
	0xc8, 0xd4, 0xde, 0xed, 0x36, 0x05, 0x86, 0x94, 0xa1, 0x09, 0x5f, 0xc7, 0x2f, 0xe5, 0xd7, 0x31,
	0x33, 0xec, 0x9f, 0x66, 0x6b, 0x8d, 0x3e, 0x40, 0x98, 0x73, 0x7e, 0x67, 0x38, 0x5c, 0x00, 0x5a,
	0xd9, 0x86, 0x0b, 0x3e, 0x2f, 0x2e, 0x9d, 0xf5, 0x36, 0x97, 0x87, 0xad, 0x04, 0xd4, 0xd7, 0xdb,
	0xdc, 0x3c, 0x5d, 0x72, 0xbe, 0x8c, 0xc9, 0xb9, 0x65, 0x58, 0x5a, 0x56, 0xbe, 0xf9, 0xf2, 0xbe,
	0x45, 0x49, 0x26, 0x6e, 0xcc, 0xf6, 0xad, 0xba, 0x61, 0x97, 0x42, 0x9d, 0x2a, 0xc7, 0xfa, 0x00,
	0x0d, 0x9f, 0xca, 0x19, 0x8b, 0x0b, 0x1a, 0xb1, 0xd5, 0x06, 0x0d, 0xd0, 0xd7, 0x54, 0xb6, 0x6b,
	0xaf, 0x6a, 0x67, 0x8d, 0xb1, 0xbc, 0xc4, 0x26, 0x1c, 0x6f, 0xa5, 0xdd, 0x3e, 0x52, 0x5a, 0xb5,
	0xb0, 0x7e, 0xd5, 0x00, 0xfc, 0xd9, 0xa4, 0xcb, 0x93, 0x84, 0xa5, 0x0b, 0x3c, 0x83, 0xba, 0x28,
	0x33, 0x52, 0xb9, 0x27, 0x9d, 0xa6, 0x2d, 0x7b, 0xdf, 0xd9, 0x76, 0x58, 0x66, 0x34, 0x56, 0x84,
	0x24, 0x17, 0x4c, 0x30, 0xb5, 0xdb, 0xa3, 0x4e, 0xd3, 0xae, 0x6a, 0xdb, 0x37, 0x05, 0x6d, 0x37,
	0x2d, 0xc7, 0x8a, 0xb0, 0x0a, 0xa8, 0xcb, 0x1c, 0x3e, 0x87, 0xa7, 0xd3, 0xc0, 0x0f, 0x2e, 0xbe,
	0x06, 0x51, 0xf7, 0x62, 0x38, 0x74, 0x83, 0x9e, 0xa1, 0xa1, 0x01, 0x8d, 0x89, 0x17, 0x46, 0x43,
	0x2f, 0x74, 0x7b, 0x6e, 0xe8, 0x1a, 0x35, 0x89, 0xf5, 0xbc, 0x81, 0x17, 0x7a, 0x77, 0xe2, 0x11,
	0xb6, 0x00, 0x47, 0xd3, 0x30, 0xf2, 0xbd, 0x6f, 0xd1, 0xcc, 0x1d, 0x4c, 0xbd, 0x68, 0xe4, 0x7e,
	0x1e, 0x1b, 0x3a, 0x9e, 0xc2, 0x8b, 0x6b, 0xf8, 0x9e, 0x55, 0xef, 0xfc, 0xd4, 0x41, 0xf7, 0x67,
	0x13, 0x7c, 0x0b, 0xf5, 0x2f, 0x7c, 0x95, 0x22, 0xd8, 0x6a, 0x5c, 0x01, 0x5f, 0x90, 0xd9, 0xda,
	0xab, 0xeb, 0xc9, 0x29, 0x5b, 0x1a, 0xbe, 0x83, 0xe3, 0x01, 0xb1, 0x2d, 0xfd, 0x23, 0xee, 0xc0,
	0x83, 0x3e, 0x09, 0x09, 0xe1, 0x01, 0xc8, 0xdc, 0xd9, 0xc8, 0xd2, 0xf0, 0x1c, 0xa0, 0x4f, 0xa2,
	0x1b, 0x17, 0xb9, 0xa0, 0xcd, 0xc1, 0xcc, 0xe3, 0x2a, 0x73, 0x8d, 0x59, 0x1a, 0x7e, 0x84, 0x87,
	0x93, 0x94, 0x65, 0xf9, 0x15, 0x17, 0x07, 0x43, 0x7f, 0x7b, 0x28, 0xbd, 0x4f, 0x02, 0x9f, 0x55,
	0xaf, 0x73, 0xe7, 0x33, 0x31, 0xf7, 0x25, 0x4b, 0xc3, 0x0e, 0xe8, 0xa3, 0xe2, 0x8f, 0xf8, 0xe1,
	0x5b, 0x9c, 0xc3, 0x49, 0x8f, 0x62, 0x12, 0xf4, 0x5f, 0xb1, 0x4f, 0x6f, 0xbe, 0xbf, 0x5e, 0xae,
	0xc4, 0x55, 0x31, 0xb7, 0x7f, 0xf0, 0xc4, 0x49, 0x78, 0x5e, 0xac, 0x99, 0x33, 0x8f, 0x59, 0x2e,
	0x9c, 0xdd, 0xff, 0x67, 0x7e, 0xa2, 0x56, 0xef, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xba,
	0xef, 0xa3, 0x56, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KVSClient is the client API for KVS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVSClient interface {
	Join(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error)
	Leave(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Node, error)
	GetCluster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Cluster, error)
	Snapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error)
	Put(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error)
}

type kVSClient struct {
	cc *grpc.ClientConn
}

func NewKVSClient(cc *grpc.ClientConn) KVSClient {
	return &kVSClient{cc}
}

func (c *kVSClient) Join(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvs.KVS/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Leave(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvs.KVS/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) GetNode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Node, error) {
	out := new(raft.Node)
	err := c.cc.Invoke(ctx, "/kvs.KVS/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) GetCluster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Cluster, error) {
	out := new(raft.Cluster)
	err := c.cc.Invoke(ctx, "/kvs.KVS/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Snapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvs.KVS/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Get(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error) {
	out := new(KeyValuePair)
	err := c.cc.Invoke(ctx, "/kvs.KVS/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Put(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvs.KVS/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Delete(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kvs.KVS/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVSServer is the server API for KVS service.
type KVSServer interface {
	Join(context.Context, *raft.Node) (*empty.Empty, error)
	Leave(context.Context, *raft.Node) (*empty.Empty, error)
	GetNode(context.Context, *empty.Empty) (*raft.Node, error)
	GetCluster(context.Context, *empty.Empty) (*raft.Cluster, error)
	Snapshot(context.Context, *empty.Empty) (*empty.Empty, error)
	Get(context.Context, *KeyValuePair) (*KeyValuePair, error)
	Put(context.Context, *KeyValuePair) (*empty.Empty, error)
	Delete(context.Context, *KeyValuePair) (*empty.Empty, error)
}

func RegisterKVSServer(s *grpc.Server, srv KVSServer) {
	s.RegisterService(&_KVS_serviceDesc, srv)
}

func _KVS_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(raft.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Join(ctx, req.(*raft.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(raft.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Leave(ctx, req.(*raft.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).GetNode(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).GetCluster(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Snapshot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Get(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Put(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kvs.KVS/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Delete(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

var _KVS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kvs.KVS",
	HandlerType: (*KVSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _KVS_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _KVS_Leave_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _KVS_GetNode_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _KVS_GetCluster_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _KVS_Snapshot_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KVS_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _KVS_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KVS_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/kvs/kvs.proto",
}
