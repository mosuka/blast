// Copyright (c) 2019 Minoru Osuka
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 		http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

package index;

option go_package = "github.com/mosuka/blast/protobuf/index";

service Index {
    rpc NodeHealthCheck (NodeHealthCheckRequest) returns (NodeHealthCheckResponse) {
        option (google.api.http) = {
            get: "/v1/node/healthcheck"
        };
    }
    rpc NodeInfo (google.protobuf.Empty) returns (NodeInfoResponse) {
        option (google.api.http) = {
            get: "/v1/node/status"
        };
    }

    rpc ClusterJoin (ClusterJoinRequest) returns (google.protobuf.Empty) {}
    rpc ClusterLeave (ClusterLeaveRequest) returns (google.protobuf.Empty) {}
    rpc ClusterInfo (google.protobuf.Empty) returns (ClusterInfoResponse) {
        option (google.api.http) = {
            get: "/v1/cluster/status"
        };
    }
    rpc ClusterWatch (google.protobuf.Empty) returns (stream ClusterWatchResponse) {}

    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/documents/{id=**}"
        };
    }
    rpc Index (IndexRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/documents"
            body: "*"
            additional_bindings {
                put: "/v1/documents/{id=**}"
                body: "*"
            }
        };
    }
    rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/documents/{id=**}"
        };
    }
    rpc BulkIndex (BulkIndexRequest) returns (BulkIndexResponse) {
        option (google.api.http) = {
            put: "/v1/bulk"
            body: "*"
        };
    }
    rpc BulkDelete (BulkDeleteRequest) returns (BulkDeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/bulk"
            body: "*"
        };
    }
    rpc Search (SearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            post: "/v1/search"
            body: "*"
        };
    }
    rpc GetIndexConfig (google.protobuf.Empty) returns (GetIndexConfigResponse) {}
    rpc GetIndexStats (google.protobuf.Empty) returns (GetIndexStatsResponse) {}
    rpc Snapshot (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message NodeHealthCheckRequest {
    enum Probe {
        UNKNOWN = 0;
        HEALTHINESS = 1;
        LIVENESS = 2;
        READINESS = 3;
    }
    Probe probe = 1;
}

message NodeHealthCheckResponse {
    enum State {
        UNKNOWN = 0;
        HEALTHY = 1;
        UNHEALTHY = 2;
        ALIVE = 3;
        DEAD = 4;
        READY = 5;
        NOT_READY = 6;
    }
    State state = 1;
}

message Metadata {
    string grpc_address = 1;
    string grpc_gateway_address = 2;
    string http_address = 3;
}

message Node {
    enum State {
        UNKNOWN = 0;
        FOLLOWER = 1;
        CANDIDATE = 2;
        LEADER = 3;
        SHUTDOWN = 4;
    }
    string id = 1;
    string bind_address = 2;
    State state = 3;
    Metadata metadata = 4;
}

message Cluster {
    map<string, Node> nodes = 1;
}

message NodeInfoResponse {
    Node node = 1;
}

message ClusterJoinRequest {
    Node node = 1;
}

message ClusterLeaveRequest {
    string id = 1;
}

message ClusterInfoResponse {
    Cluster cluster = 1;
}

message ClusterWatchResponse {
    enum Event {
        UNKNOWN = 0;
        JOIN = 1;
        LEAVE = 2;
        UPDATE = 3;
    }
    Event event = 1;
    Node node = 2;
    Cluster cluster = 3;
}

message GetRequest {
    string id = 1;
}

message GetResponse {
//    Document document = 1;
    google.protobuf.Any fields = 1;
}

message IndexRequest {
    string id = 1;
    google.protobuf.Any fields = 2;
}

message DeleteRequest {
    string id = 1;
}

message Document {
    string id = 1;
    google.protobuf.Any fields = 2;
}

message BulkIndexRequest {
    repeated Document documents = 1;
}

message BulkIndexResponse {
    int32 count = 1;
}

message BulkDeleteRequest {
    repeated string ids = 1;
}

message BulkDeleteResponse {
    int32 count = 1;
}

message SearchRequest {
    google.protobuf.Any search_request = 1;
}

message SearchResponse {
    google.protobuf.Any search_result = 1;
}

message IndexConfig {
    google.protobuf.Any index_mapping = 1;
    string index_type = 2;
    string index_storage_type = 3;
}

message GetIndexConfigResponse {
    IndexConfig index_config = 1;
}

message GetIndexStatsResponse {
    google.protobuf.Any index_stats = 1;
}

message Proposal {
    enum Event {
        UNKNOWN = 0;
        SET_NODE = 1;
        DELETE_NODE = 2;
        INDEX = 3;
        DELETE = 4;
        BULK_INDEX = 5;
        BULK_DELETE = 6;
    }
    Event event = 1;
    Node node = 2;
    Document document = 3;
    string id = 4;
    repeated Document documents = 5;
    repeated string ids = 6;
}
